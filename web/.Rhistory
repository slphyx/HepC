manipulate(
barplot(runif(x.max),col = color),
x.max=slider(15,30),
color=picker("red","blue","yellow"),
y = checkbox()
)
manipulate(
barplot(runif(x.max),col = color,horiz =y),
x.max=slider(15,30),
color=picker("red","blue","yellow"),
y = checkbox()
)
manipulate(
barplot(runif(x.max),col = color,horiz =y),
x.max=slider(15,30),
color=picker("red","blue","yellow"),
horizon = checkbox(),
button("random")
)
manipulate(
barplot(runif(x.max),col = color,horiz =y),
x.max=slider(15,30),
color=picker("red","blue","yellow"),
horizon = checkbox()
)
manipulate(
barplot(runif(x.max),col = color,horiz =horizon),
x.max=slider(15,30),
color=picker("red","blue","yellow"),
horizon = checkbox(),
button("random")
)
manipulate(
barplot(runif(x.max),col = color,horiz =horizon),
x.max=slider(15,30),
color=picker("red","blue","yellow"),
horizon = checkbox(),
)
manipulate(
barplot(runif(x.max),col = color,horiz =horizon),
x.max=slider(15,30),
color=picker("red","blue","yellow"),
horizon = checkbox()
)
manipulate(
barplot(runif(x.max),col = color,horiz =horizon),
x.max=slider(15,30),
color=picker("red","blue","yellow","black","green"),
horizon = checkbox()
)
manipulate(
barplot(runif(x.max),col = color,horiz =horizon,axes = yaxis),
x.max=slider(15,30),
color=picker("red","blue","yellow","black","green"),
horizon = checkbox(),
yaxis = checkbox()
)
manipulate(
plot(x=x,y=sin(a*x+b),type ="l")+
lines(c(c,c),c(-10,10),col= "blue")+
lines(c(0,30),c(0,0),col= "red")+
text(x=c,y=sin(a*c+b),formatC(sin(a*c+b), digits = 4, format = "f")),
a=slider(0,2,step=0.01),
b=slider(0,4,step=0.1),
c=slider(0,30,step=0.1)
)
manipulate(
plot(x=x,y=sin(a*x+b),type ="l")+
lines(c(c,c),c(-10,10),col= "blue")+
lines(c(0,30),c(0,0),col= "red")+
text(x=c,y=sin(a*c+b),formatC(sin(a*c+b), digits = 4, format = "f")),
a=slider(0,2,step=0.01,initial = 1),
b=slider(0,4,step=0.1,initial = 2),
c=slider(0,30,step=0.1,initial = 15)
)
manipulate(
plot(x=x,y=sin(a*x+b),type ="l")+
lines(c(c,c),c(-10,10),col= "blue")+
lines(c(0,30),c(0,0),col= "red")+
text(x=c,y=sin(a*c+b),formatC(sin(a*c+b), digits = 4, format = "f")),
a=slider(0,2,step=0.01,initial = 1),
b=slider(0,4,step=0.1,initial = 2),
c=slider(0,30,step=0.1,initial = 15)
)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(min = 10,max = 40,initial = 20,label = "Random",step=5)
)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(min = 10,max = 40,initial = 20,label = "Random",step=5,ticks=25)
)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(min = 10,max = 40,initial = 20,label = "Random",step=5,ticks=5)
)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(min = 10,max = 40,initial = 20,label = "Random",step=5,ticks=25)
)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(min = 10,max = 40,initial = 20,label = "Random",step=5,ticks = FALSE)
)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(min = 10,max = 40,initial = 20,label = "Random",step=5,ticks = TRUE)
)
c = c("red","blue","yellow","black","green")
manipulate(
barplot(runif(x.max),col = color,horiz =horizon,axes = yaxis),
x.max=slider(15,30),
color=picker(c),
horizon = checkbox(),
yaxis = checkbox()
)
manipulate(
plot(cars, xlim=c(0,x.max)),
x.max=slider(min = 10,max = 40,initial = 20,label = "Random",step=5,ticks = TRUE)
)
manipulate(
barplot(runif(20),col = color),
color=picker("red","blue","yellow","black","green","rainbow" = rainbow(20))
)
manipulate(
barplot(runif(20),col = color),
color=picker("red","blue","yellow","black","green","rainbow" = rainbow(20),label = "Choose color")
)
manipulate(
barplot(runif(20),col = cm.colors(20)),
horizon = checkbox(initial = TURE, label = "horizon cm.colors")
)
manipulate(
barplot(runif(20),col = cm.colors(20)),
horizon = checkbox(initial = TURE, label = "horizon cm.colors")
)
manipulate(
barplot(runif(20),col = cm.colors(20)),
horizon = checkbox(initial = TRUE, label = "horizon cm.colors")
)
manipulate(
barplot(runif(20),col = cm.colors(20),horiz =horizon),
horizon = checkbox(initial = TRUE, label = "horizon cm.colors")
)
manipulate(
barplot(runif(20),col = cm.colors(20),horiz =horizon),
horizon = checkbox(initial = TRUE, label = "horizon cm.colors")
)
runApp('try')
install.packages('rsconnect')
library(rsconnect)
library("rsconnect")
rsconnect::setAccountInfo(name='tanaphumwichaita',
token='24DF1BBA429860088A6DB4FA01510384',
secret='NDsVCGihIHDP8Ax5HvsIpk4AtMCe7TpGABKIhBaP')
library("rsconnect")
rsconnect::deployApp('C:\Users\Win10\Documents\test')
rsconnect::deployApp('C:/Users/Win10/Documents/test')
runApp('test')
runApp('test')
rsconnect::deployApp('C:/Users/Win10/Documents/test')
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) +geom_line(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) +geom_line(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
view(mpg)
View(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))+geom_line(mapping = aes(x = displ, y = hwy,color = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
+geom_line(mapping = aes(x = displ, y = hwy,color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
+ geom_line(mapping = aes(x = displ, y = hwy,color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) + geom_line(mapping = aes(x = displ, y = hwy,color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) + geom_line(mapping = aes(x = displ, y = hwy,color = year))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) + geom_line(mapping = aes(x = displ, y = hwy,color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class)) + geom_line(mapping = aes(x = displ, y = hwy,size = class))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class)) + geom_line(mapping = aes(x = displ, y = hwy,alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape  = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape  = class)) + geom_line(mapping = aes(x = displ, y = hwy,shape  = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "#646464")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class,color =class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class,color =class,alpha = class,size = class))
a = rorm(100)
a = rnorm(100)
a = rnorm(100)
b = qnorm(100)
c = pnorm(100)
d = dnorm(100)
a = rnorm(100)
a = (100)
summary(a)
a = rnorm(100)
summary(a)
sd(a)
mean(a)
a = rnorm(100)
sd(a)
mean(a)
runif(100)
runif(10)
sample(10)
sample(10,size = 2000)
sample(10,size = 10)
sample(10,size = 20)
sample(10,size = 20,replace =TRUE)
sample(10,size = 20,replace =TRUE,prob =1/2)
sample(10,size = 20,replace =TRUE,prob =1)
sample(c(0,100),size = 20,replace =TRUE)
sample(10:100,size = 20,replace =TRUE)
sample(10:100,size = 1000,replace =TRUE)
sample(10:100,size = 1000)
sample(10:100,size = 100)
sample(10:100,size = 50)
sample(10,size = 100,replace =TRUE)
sample(-10:10,size = 100,replace =TRUE)
sample(1:10,size = 10,replace =FALSE)
sample(1:10,size = 10,replace =FALSE)
sample(1:10,size = 10,replace =TRUE)
sample(10)
sample(10,size = 10,replace =FALSE)
sample(10,size = 10,replace =TRUE)
runif(10,1,10)
rnorm(10)
rnorm(10,5,5)
mean(rnorm(10,5,5))
sd(rnorm(10,5,5))
mean(rnorm(10,5,5))
mean(rnorm(10,5,5))
sd(rnorm(10,5,5))
mean(rnorm(10,5,5))
sd(rnorm(10,5,5))
install.packages("plotrix")
library("plotrix")
cylindrect(10,10,10,10)
cylindrect(10,10,10,10,col = "red")
cylindrect(10,10,10,10,col = "red",gradient="x",nslices=50)
cylindrect(xleft = 10,ybottom = 10,xright = 10,ytop = 10,col = "red",gradient="x",nslices=50)
polt(cylindrect(xleft = 10,ybottom = 10,xright = 10,ytop = 10,col = "red",gradient="x",nslices=50))
plot(cylindrect(xleft = 10,ybottom = 10,xright = 10,ytop = 10,col = "red",gradient="x",nslices=50))
plot.new(cylindrect(xleft = 10,ybottom = 10,xright = 10,ytop = 10,col = "red",gradient="x",nslices=50))
cylindrect(0,0,1,5,"red")
plot(0,xlim=c(0,5),ylim=c(0,5),main="Examples of pseudocylindrical rectangles",
xlab="",ylab="",axes=FALSE,type="n")
plot(0,xlim=c(0,5),ylim=c(0,5),main="Examples of pseudocylindrical rectangles",
xlab="",ylab="",axes=FALSE,type="n")
cylindrect(0,0,1,5,"red")
plot(0,xlim=c(0,5),ylim=c(0,5),main="Examples of pseudocylindrical rectangles",
xlab="",ylab="",axes=FALSE,type="n")
cylindrect(0,0,1,5,"red")
cylindrect(rep(1,3),c(0,2,4),rep(4,3),c(1,3,5),"green",gradient="y")
cylindrect(4,0,5,5,"#8844aa")
n<-1000
plot.new()
frame()
x<-runif(n,-1,1)
y<-runif(n,-1,1)
for (i in 1:n) { plot(x[i],y[i])}
n<-1000
plot.new()
frame()
x<-runif(n,-1,1)
y<-runif(n,-1,1)
for (i in 1:n) { plot(x[i],y[i])}
draw.circle(0,0,1,nv=1000,border=NULL,col=NA,lty=1,lwd=1)
plot(x,y)
draw.circle(0,0,1,nv=1000,border=NULL,col=NA,lty=1,lwd=1)
draw.circle(0,0,1,nv=1000,border=NULL,col=NA,lty=1,lwd=1)
draw.circle(0,0,1,nv=1000,border=NULL,col=NA,lty=1,lwd=1)
plot(x,y)
x = runif(100, -1, 1)
y = runif(100, -1, 1)
plot(x, y, asp = 1, xlim = c(-1, 1))
draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
plot.new()
draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
plot(x, y, asp = 1, xlim = c(-1, 1))
draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
2+2
4-5
2*6
5/8
10%%2
10%/%2
2^8
1 > 2
5 < 8
2 >= 2
4 <= 3
4 == 8/2
5 != log(2)
p <- c(TRUE,TRUE,FALSE,FALSE)
q <- c(TRUE,FALSE,TRUE,FALSE)
p&q
p|q
!p
!q
p&&q
p||q
a = 5
b <- 10
c <<- 78
v1 <- c(3,1,TRUE,2+3i)
v2 <<- c(3,1,TRUE,2+3i)
v3 = c(3,1,TRUE,2+3i)
v1 <- c(3,1,TRUE,2+3i)
v2 <<- c(3,1,TRUE,2+3i)
v3 = c(3,1,TRUE,2+3i)
c(3,1,TRUE,2+3i) -> v4
c(3,1,TRUE,2+3i) ->> v5
v1
v2
v3
v4
v5
1:10
10:1
1 %in% 1:10
11 %in% 1:10
M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
t = M %*% t(M)
t
1%*%2
13%*%123
M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
t = M %*% M
t
M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
t = M %*% t(M)
t
x <- sample(1:10,size = 50,replace =FALSE)
x <- sample(1:10,size = 50,replace =TRUE)
x
mean(x)
mean(x,trim = 0.5)
median(x)
mode(x)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Calculate the mode using the user function.
result <- getmode(x)
result
sd(x)
summary(x)
library(foreign)
file.choose()
dataset = read.spss("C:\\Users\\Win10\\Desktop\\backup sao\\SaveGames\\SaveData.sav", to.data.frame=TRUE)
c -> 1
c <- 1
C <- c+1
C <- C+1
c <- [1:10]
d <- [1:10]
d <- 1:10
q()
sin(45)
sin(1)
sinpi(0.5)
sinpi(0.25)
sinpi(pi*0.5)
sinpi(pi)
sin(pi)
sinpi(pi/2)
sinpi(0.2)
sinpi(0.25)
sinpi(0.5)
sinpi(0.125)
sinpi(90)
sinpi(45)
sinpi(22)
sinpi(1)
sinpi(0.9)
sinpi(0.5)
sin(pi)
sin(1)
sin(0.5)
sin(1.57)
sinpi(0.5)
sinpi(1)
sin(1.58)
sin(1.6)
sin(1.7)
sin(1)
sin(45 * 0.0174532925)
sin(0.0174532925)
sin(0.0174532925 * 90)
sin(0.0174532925 * 45)
sinpi(0.5)
sinpi(0.25)
sin(0.0174532925 * 30)
shiny::runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runif(100)
t=seq(0,2,0.01)
y
t=seq(0,2,0.01)
t
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
t
t = "sin"
t
t = 'sin'
t
x <- c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")
setDay <- function(day){
if(day == "Sat" | "Sun"){
return("Weekend")
} else {
return("Weekday")
}
}
sapply(x, setDay)
x <- "sin"
isTRUE(x == sin)
y  <- 1
isTRUE(y == 1)
runApp('D:/R/shinytest/test')
tanpi(t)
plot(t,y,type="l", xlab="time", ylab="Tan wave")
t=seq(0,10,0.1)
tanpi(t)
plot(t,y,type="l", xlab="time", ylab="Tan wave")
isTRUE(y == 1)
t=seq(0,10,0.1)
Y = tanpi(t)
plot(t,y,type="l", xlab="time", ylab="Tan wave")
t=seq(0,10,0.1)
y=sin(t)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
runApp('D:/R/shinytest/test')
t=seq(0,10,0.1)
t == 2
isTRUE(t == 2)
runApp('D:/R/shinytest/test')
isTRUE(t == 2)
t == 2
y  <- 1
y  <- 1
y  <- 2
isTRUE(y == 2)
if (isTRUE(y == 2)) print("Y")
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
class(t)
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
x <- 2
x == 2
if(x == 2) print("something")
runApp('D:/R/shinytest/test')
runApp('D:/R/shinytest/test')
if(x == 2) print("something")
x <- 3
x == 2
if(x == 2) print("something")
shiny::runApp('D:/Shiny-20190913T122337Z-001/Shiny/web')
find_rtools()
shell("PATH")
shiny::runApp('D:/Shiny-20190913T122337Z-001/Shiny/web')
install.packages(c("deSolve", "dplyr", "erer", "ggplot2", "plyr", "Rcpp", "reshape2", "scales", "shiny", "shinyjs", "tidyverse"))
install.packages(c("shiny", "shinyBS", "shinyjs", "tableHTML"))
shiny::runApp('D:/Shiny-20190913T122337Z-001/Shiny/web')
